When would you want to use a remote repository rather than keeping all your work
local?

    Using a remote repo is better than keeping your work locally in case you plan on using multiple devices because it allows you to push/pull easily, protects against device failures, and makes it easier to share repos with other developers.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If Git always updated automatically, you might lose your local changes. Also, any changes pushed to the remote repo might have bugs which would then get added into your working environment. Pulls from the remote repo might conflict with the branch you're working on locally.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks allow you to add an existing repo to one you own so that you can give credit to users for their work. Cloning allows you to copy a repo to your local directory. Branches can exist in the local directory, staging directory, working directory, and remote repro. You should fork a repo to save yourself having to copy and clone it. Create branches in your local directory to make incremental changes or experiment, then push them to your remote repro. Clone repos so that you can make changes to them locally and update the remote repo.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can easily make changes based on the most updated version of the remote branch even if you don't have internet access. Also, it's easy to see where you have conflicting changes with your local version and merge the latest branch with your current one before pushing your local changes.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Most likely would need to share the entire file and document list of changes. It would be much more difficult without using Git and GitHub since you'd need to merge the files and go through all conflicts yourself.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When you want to make new changes without causing issues on the (presumable stable) main branch. Ex: adding a new feature to an already working product. This allows you take more risks because you if you break something you can just go back to an earlier node on the existing master branch. Making a change in master itself could have problems because it's harder to see what was changed and merging multiple branches from different users is easier and cleaner than having them all make updates to master itself.
